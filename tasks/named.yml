---

- name: "named: Remove {{ bsd_named_conf_file }}"
  ansible.builtin.file:
    path: "{{ bsd_named_conf_file }}"
    state: absent
  when: bsd_named_conf_recreate|bool
  tags: bsd_named_conf

- name: "named: Stat {{ bsd_named_conf_file }}"
  ansible.builtin.stat:
    path: "{{ bsd_named_conf_file }}"
  register: conf_file
  tags: bsd_named_conf

- name: "named: Create {{ bsd_named_conf_file }}"
  ansible.builtin.copy:
    remote_src: true
    src: "{{ bsd_named_conf_file }}.sample"
    dest: "{{ bsd_named_conf_file }}"
    mode: preserve
  when: not conf_file.stat.exists
  tags: bsd_named_conf

- name: "named: Create BEGIN BLOCK options marker in {{ bsd_named_conf_file }}"
  ansible.builtin.lineinfile:
    path: "{{ bsd_named_conf_file }}"
    insertbefore: '^options {'
    firstmatch: true
    line: '// *** BEGIN ANSIBLE MANAGED BLOCK options ***'
  when: not ansible_check_mode
  tags: bsd_named_conf

- name: "named: Create END BLOCK options marker in {{ bsd_named_conf_file }}"
  ansible.builtin.lineinfile:
    path: "{{ bsd_named_conf_file }}"
    insertafter: '^};'
    firstmatch: true
    line: '// *** END ANSIBLE MANAGED BLOCK options ***'
  when: not ansible_check_mode
  tags: bsd_named_conf

- name: "named: Configure options in {{ bsd_named_conf_file }}"
  ansible.builtin.blockinfile:
    dest: "{{ bsd_named_conf_file }}"
    marker: '// *** {mark} ANSIBLE MANAGED BLOCK options ***'
    block: "{{ lookup('template', 'block-named-options.j2') }}"
    validate: 'named-checkconf %s'
    backup: "{{ bsd_named_backup_conf }}"
  notify: reload named
  tags: bsd_named_conf_options

- name: "named: Configure logging in {{ bsd_named_conf_file }}"
  ansible.builtin.blockinfile:
    dest: "{{ bsd_named_conf_file }}"
    marker: '// *** {mark} ANSIBLE MANAGED BLOCK logging ***'
    insertafter: EOF
    block: "{{ lookup('template', 'block-named-logging.j2') }}"
    validate: 'named-checkconf %s'
    backup: "{{ bsd_named_backup_conf }}"
  notify: reload named
  when: bsd_named_conf_log|bool
  tags: bsd_named_conf_logging

# EOF
...
